/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.klarna.rest.model.checkout;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * Order
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-09-06T10:31:49.433Z")
public class Order {
  @JsonProperty("order_id")
  private String orderId = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("purchase_country")
  private String purchaseCountry = null;

  @JsonProperty("purchase_currency")
  private String purchaseCurrency = null;

  @JsonProperty("locale")
  private String locale = null;

  @JsonProperty("status")
  private String status = null;

  @JsonProperty("billing_address")
  private Address billingAddress = null;

  @JsonProperty("shipping_address")
  private Address shippingAddress = null;

  @JsonProperty("order_amount")
  private Long orderAmount = null;

  @JsonProperty("order_tax_amount")
  private Long orderTaxAmount = null;

  @JsonProperty("order_lines")
  private List<OrderLine> orderLines = new ArrayList<OrderLine>();

  @JsonProperty("customer")
  private Customer customer = null;

  @JsonProperty("merchant_urls")
  private MerchantUrls merchantUrls = null;

  @JsonProperty("html_snippet")
  private String htmlSnippet = null;

  @JsonProperty("merchant_reference1")
  private String merchantReference1 = null;

  @JsonProperty("merchant_reference2")
  private String merchantReference2 = null;

  @JsonProperty("started_at")
  private OffsetDateTime startedAt = null;

  @JsonProperty("completed_at")
  private OffsetDateTime completedAt = null;

  @JsonProperty("last_modified_at")
  private OffsetDateTime lastModifiedAt = null;

  @JsonProperty("options")
  private Options options = null;

  @JsonProperty("attachment")
  private Attachment attachment = null;

  @JsonProperty("external_payment_methods")
  private List<PaymentProvider> externalPaymentMethods = null;

  @JsonProperty("external_checkouts")
  private List<PaymentProvider> externalCheckouts = null;

  @JsonProperty("shipping_countries")
  private List<String> shippingCountries = null;

  @JsonProperty("shipping_options")
  private List<ShippingOption> shippingOptions = null;

  @JsonProperty("merchant_data")
  private String merchantData = null;

  @JsonProperty("gui")
  private Gui gui = null;

  @JsonProperty("merchant_requested")
  private MerchantRequested merchantRequested = null;

  @JsonProperty("selected_shipping_option")
  private ShippingOption selectedShippingOption = null;

  @JsonProperty("recurring")
  private Boolean recurring = false;

  @JsonProperty("recurring_token")
  private String recurringToken = null;

  @JsonProperty("recurring_description")
  private String recurringDescription = null;

   /**
   * The unique order ID (max 255 characters).
   * @return orderId
  **/
  @ApiModelProperty(example = "f3392f8b-6116-4073-ab96-e330819e2c07", value = "The unique order ID (max 255 characters).")
  public String getOrderId() {
    return orderId;
  }

   /**
   * The merchant name (max 255 characters).
   * @return name
  **/
  @ApiModelProperty(example = "Women's Fashion", value = "The merchant name (max 255 characters).")
  public String getName() {
    return name;
  }

  public Order purchaseCountry(String purchaseCountry) {
    this.purchaseCountry = purchaseCountry;
    return this;
  }

   /**
   * ISO 3166 alpha-2 purchase country.
   * @return purchaseCountry
  **/
  @ApiModelProperty(example = "US", required = true, value = "ISO 3166 alpha-2 purchase country.")
  public String getPurchaseCountry() {
    return purchaseCountry;
  }

  public void setPurchaseCountry(String purchaseCountry) {
    this.purchaseCountry = purchaseCountry;
  }

  public Order purchaseCurrency(String purchaseCurrency) {
    this.purchaseCurrency = purchaseCurrency;
    return this;
  }

   /**
   * ISO 4217 purchase currency.
   * @return purchaseCurrency
  **/
  @ApiModelProperty(example = "USD", required = true, value = "ISO 4217 purchase currency.")
  public String getPurchaseCurrency() {
    return purchaseCurrency;
  }

  public void setPurchaseCurrency(String purchaseCurrency) {
    this.purchaseCurrency = purchaseCurrency;
  }

  public Order locale(String locale) {
    this.locale = locale;
    return this;
  }

   /**
   * RFC 1766 customer&#39;s locale.
   * @return locale
  **/
  @ApiModelProperty(example = "en-US", required = true, value = "RFC 1766 customer's locale.")
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }

   /**
   * The current status of the order.
   * @return status
  **/
  @ApiModelProperty(example = "CHECKOUT_INCOMPLETE", value = "The current status of the order.")
  public String getStatus() {
    return status;
  }

  public Order billingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Once the customer has provided any data in the checkout iframe, updates to this object will be ignored (without generating an error).
   * @return billingAddress
  **/
  @ApiModelProperty(value = "Once the customer has provided any data in the checkout iframe, updates to this object will be ignored (without generating an error).")
  public Address getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
  }

   /**
   * Unless the customer has explicitly chosen to enter a separate shipping address, this is a clone of billing_address.
   * @return shippingAddress
  **/
  @ApiModelProperty(value = "Unless the customer has explicitly chosen to enter a separate shipping address, this is a clone of billing_address.")
  public Address getShippingAddress() {
    return shippingAddress;
  }

  public Order orderAmount(Long orderAmount) {
    this.orderAmount = orderAmount;
    return this;
  }

   /**
   * Non-negative, minor units. Total amount of the order, including tax and any discounts.
   * minimum: 0
   * @return orderAmount
  **/
  @ApiModelProperty(example = "50000", required = true, value = "Non-negative, minor units. Total amount of the order, including tax and any discounts.")
  public Long getOrderAmount() {
    return orderAmount;
  }

  public void setOrderAmount(Long orderAmount) {
    this.orderAmount = orderAmount;
  }

  public Order orderTaxAmount(Long orderTaxAmount) {
    this.orderTaxAmount = orderTaxAmount;
    return this;
  }

   /**
   * Non-negative, minor units. The total tax amount of the order.
   * minimum: 0
   * @return orderTaxAmount
  **/
  @ApiModelProperty(example = "5000", required = true, value = "Non-negative, minor units. The total tax amount of the order.")
  public Long getOrderTaxAmount() {
    return orderTaxAmount;
  }

  public void setOrderTaxAmount(Long orderTaxAmount) {
    this.orderTaxAmount = orderTaxAmount;
  }

  public Order orderLines(List<OrderLine> orderLines) {
    this.orderLines = orderLines;
    return this;
  }

  public Order addOrderLinesItem(OrderLine orderLinesItem) {
    this.orderLines.add(orderLinesItem);
    return this;
  }

   /**
   * The applicable order lines (max 1000)
   * @return orderLines
  **/
  @ApiModelProperty(required = true, value = "The applicable order lines (max 1000)")
  public List<OrderLine> getOrderLines() {
    return orderLines;
  }

  public void setOrderLines(List<OrderLine> orderLines) {
    this.orderLines = orderLines;
  }

  public Order customer(Customer customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Information about the liable customer of the order.
   * @return customer
  **/
  @ApiModelProperty(value = "Information about the liable customer of the order.")
  public Customer getCustomer() {
    return customer;
  }

  public void setCustomer(Customer customer) {
    this.customer = customer;
  }

  public Order merchantUrls(MerchantUrls merchantUrls) {
    this.merchantUrls = merchantUrls;
    return this;
  }

   /**
   * The merchant_urls object.
   * @return merchantUrls
  **/
  @ApiModelProperty(required = true, value = "The merchant_urls object.")
  public MerchantUrls getMerchantUrls() {
    return merchantUrls;
  }

  public void setMerchantUrls(MerchantUrls merchantUrls) {
    this.merchantUrls = merchantUrls;
  }

   /**
   * The HTML snippet that is used to render the checkout in an iframe.
   * @return htmlSnippet
  **/
  @ApiModelProperty(example = "<div id='klarna-checkout-container'><script>alert('Initializing Klarna Checkout');</script></div>", value = "The HTML snippet that is used to render the checkout in an iframe.")
  public String getHtmlSnippet() {
    return htmlSnippet;
  }

  public Order merchantReference1(String merchantReference1) {
    this.merchantReference1 = merchantReference1;
    return this;
  }

   /**
   * Used for storing merchant&#39;s internal order number or other reference. If set, will be shown on the confirmation page as \&quot;order number\&quot; (max 255 characters).
   * @return merchantReference1
  **/
  @ApiModelProperty(example = "45aa52f387871e3a210645d4", value = "Used for storing merchant's internal order number or other reference. If set, will be shown on the confirmation page as \"order number\" (max 255 characters).")
  public String getMerchantReference1() {
    return merchantReference1;
  }

  public void setMerchantReference1(String merchantReference1) {
    this.merchantReference1 = merchantReference1;
  }

  public Order merchantReference2(String merchantReference2) {
    this.merchantReference2 = merchantReference2;
    return this;
  }

   /**
   * Used for storing merchant&#39;s internal order number or other reference (max 255 characters).
   * @return merchantReference2
  **/
  @ApiModelProperty(example = "45aa52f387871e3a210645d4", value = "Used for storing merchant's internal order number or other reference (max 255 characters).")
  public String getMerchantReference2() {
    return merchantReference2;
  }

  public void setMerchantReference2(String merchantReference2) {
    this.merchantReference2 = merchantReference2;
  }

   /**
   * ISO 8601 datetime. When the merchant created the order.
   * @return startedAt
  **/
  @ApiModelProperty(value = "ISO 8601 datetime. When the merchant created the order.")
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }

   /**
   * ISO 8601 datetime. When the customer completed the order.
   * @return completedAt
  **/
  @ApiModelProperty(value = "ISO 8601 datetime. When the customer completed the order.")
  public OffsetDateTime getCompletedAt() {
    return completedAt;
  }

   /**
   * ISO 8601 datetime. When the order was last modified.
   * @return lastModifiedAt
  **/
  @ApiModelProperty(value = "ISO 8601 datetime. When the order was last modified.")
  public OffsetDateTime getLastModifiedAt() {
    return lastModifiedAt;
  }

  public Order options(Options options) {
    this.options = options;
    return this;
  }

   /**
   * Options for this purchase.
   * @return options
  **/
  @ApiModelProperty(value = "Options for this purchase.")
  public Options getOptions() {
    return options;
  }

  public void setOptions(Options options) {
    this.options = options;
  }

  public Order attachment(Attachment attachment) {
    this.attachment = attachment;
    return this;
  }

   /**
   * Additional purchase information required for some industries.
   * @return attachment
  **/
  @ApiModelProperty(value = "Additional purchase information required for some industries.")
  public Attachment getAttachment() {
    return attachment;
  }

  public void setAttachment(Attachment attachment) {
    this.attachment = attachment;
  }

  public Order externalPaymentMethods(List<PaymentProvider> externalPaymentMethods) {
    this.externalPaymentMethods = externalPaymentMethods;
    return this;
  }

  public Order addExternalPaymentMethodsItem(PaymentProvider externalPaymentMethodsItem) {
    if (this.externalPaymentMethods == null) {
      this.externalPaymentMethods = new ArrayList<PaymentProvider>();
    }
    this.externalPaymentMethods.add(externalPaymentMethodsItem);
    return this;
  }

   /**
   * List of external payment methods.
   * @return externalPaymentMethods
  **/
  @ApiModelProperty(value = "List of external payment methods.")
  public List<PaymentProvider> getExternalPaymentMethods() {
    return externalPaymentMethods;
  }

  public void setExternalPaymentMethods(List<PaymentProvider> externalPaymentMethods) {
    this.externalPaymentMethods = externalPaymentMethods;
  }

  public Order externalCheckouts(List<PaymentProvider> externalCheckouts) {
    this.externalCheckouts = externalCheckouts;
    return this;
  }

  public Order addExternalCheckoutsItem(PaymentProvider externalCheckoutsItem) {
    if (this.externalCheckouts == null) {
      this.externalCheckouts = new ArrayList<PaymentProvider>();
    }
    this.externalCheckouts.add(externalCheckoutsItem);
    return this;
  }

   /**
   * List of external checkouts.
   * @return externalCheckouts
  **/
  @ApiModelProperty(value = "List of external checkouts.")
  public List<PaymentProvider> getExternalCheckouts() {
    return externalCheckouts;
  }

  public void setExternalCheckouts(List<PaymentProvider> externalCheckouts) {
    this.externalCheckouts = externalCheckouts;
  }

  public Order shippingCountries(List<String> shippingCountries) {
    this.shippingCountries = shippingCountries;
    return this;
  }

  public Order addShippingCountriesItem(String shippingCountriesItem) {
    if (this.shippingCountries == null) {
      this.shippingCountries = new ArrayList<String>();
    }
    this.shippingCountries.add(shippingCountriesItem);
    return this;
  }

   /**
   * A list of countries (ISO 3166 alpha-2). Default is purchase_country only.
   * @return shippingCountries
  **/
  @ApiModelProperty(example = "[\"us\",\"gb\"]", value = "A list of countries (ISO 3166 alpha-2). Default is purchase_country only.")
  public List<String> getShippingCountries() {
    return shippingCountries;
  }

  public void setShippingCountries(List<String> shippingCountries) {
    this.shippingCountries = shippingCountries;
  }

  public Order shippingOptions(List<ShippingOption> shippingOptions) {
    this.shippingOptions = shippingOptions;
    return this;
  }

  public Order addShippingOptionsItem(ShippingOption shippingOptionsItem) {
    if (this.shippingOptions == null) {
      this.shippingOptions = new ArrayList<ShippingOption>();
    }
    this.shippingOptions.add(shippingOptionsItem);
    return this;
  }

   /**
   * A list of shipping options available for this order.
   * @return shippingOptions
  **/
  @ApiModelProperty(value = "A list of shipping options available for this order.")
  public List<ShippingOption> getShippingOptions() {
    return shippingOptions;
  }

  public void setShippingOptions(List<ShippingOption> shippingOptions) {
    this.shippingOptions = shippingOptions;
  }

  public Order merchantData(String merchantData) {
    this.merchantData = merchantData;
    return this;
  }

   /**
   * Pass through field (max 1024 characters).
   * @return merchantData
  **/
  @ApiModelProperty(example = "{\"marketplace_seller_info\":[{\"product_category\":\"Women's Fashion\",\"product_name\":\"Women Sweatshirt\"}]}", value = "Pass through field (max 1024 characters).")
  public String getMerchantData() {
    return merchantData;
  }

  public void setMerchantData(String merchantData) {
    this.merchantData = merchantData;
  }

  public Order gui(Gui gui) {
    this.gui = gui;
    return this;
  }

   /**
   * The gui object.
   * @return gui
  **/
  @ApiModelProperty(value = "The gui object.")
  public Gui getGui() {
    return gui;
  }

  public void setGui(Gui gui) {
    this.gui = gui;
  }

   /**
   * Stores merchant requested data.
   * @return merchantRequested
  **/
  @ApiModelProperty(value = "Stores merchant requested data.")
  public MerchantRequested getMerchantRequested() {
    return merchantRequested;
  }

   /**
   * Current shipping options selected by the customer.
   * @return selectedShippingOption
  **/
  @ApiModelProperty(value = "Current shipping options selected by the customer.")
  public ShippingOption getSelectedShippingOption() {
    return selectedShippingOption;
  }

  public Order recurring(Boolean recurring) {
    this.recurring = recurring;
    return this;
  }

   /**
   * Indicates whether this purchase will create a token that can be used by the merchant to create recurring purchases. This must be enabled for the merchant to use. Default: false
   * @return recurring
  **/
  @ApiModelProperty(value = "Indicates whether this purchase will create a token that can be used by the merchant to create recurring purchases. This must be enabled for the merchant to use. Default: false")
  public Boolean isRecurring() {
    return recurring;
  }

  public void setRecurring(Boolean recurring) {
    this.recurring = recurring;
  }

   /**
   * Token to be used when creating recurring orders.
   * @return recurringToken
  **/
  @ApiModelProperty(value = "Token to be used when creating recurring orders.")
  public String getRecurringToken() {
    return recurringToken;
  }

   /**
   * Description recurring subscription.
   * @return recurringDescription
  **/
  @ApiModelProperty(value = "Description recurring subscription.")
  public String getRecurringDescription() {
    return recurringDescription;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.orderId, order.orderId) &&
        Objects.equals(this.name, order.name) &&
        Objects.equals(this.purchaseCountry, order.purchaseCountry) &&
        Objects.equals(this.purchaseCurrency, order.purchaseCurrency) &&
        Objects.equals(this.locale, order.locale) &&
        Objects.equals(this.status, order.status) &&
        Objects.equals(this.billingAddress, order.billingAddress) &&
        Objects.equals(this.shippingAddress, order.shippingAddress) &&
        Objects.equals(this.orderAmount, order.orderAmount) &&
        Objects.equals(this.orderTaxAmount, order.orderTaxAmount) &&
        Objects.equals(this.orderLines, order.orderLines) &&
        Objects.equals(this.customer, order.customer) &&
        Objects.equals(this.merchantUrls, order.merchantUrls) &&
        Objects.equals(this.htmlSnippet, order.htmlSnippet) &&
        Objects.equals(this.merchantReference1, order.merchantReference1) &&
        Objects.equals(this.merchantReference2, order.merchantReference2) &&
        Objects.equals(this.startedAt, order.startedAt) &&
        Objects.equals(this.completedAt, order.completedAt) &&
        Objects.equals(this.lastModifiedAt, order.lastModifiedAt) &&
        Objects.equals(this.options, order.options) &&
        Objects.equals(this.attachment, order.attachment) &&
        Objects.equals(this.externalPaymentMethods, order.externalPaymentMethods) &&
        Objects.equals(this.externalCheckouts, order.externalCheckouts) &&
        Objects.equals(this.shippingCountries, order.shippingCountries) &&
        Objects.equals(this.shippingOptions, order.shippingOptions) &&
        Objects.equals(this.merchantData, order.merchantData) &&
        Objects.equals(this.gui, order.gui) &&
        Objects.equals(this.merchantRequested, order.merchantRequested) &&
        Objects.equals(this.selectedShippingOption, order.selectedShippingOption) &&
        Objects.equals(this.recurring, order.recurring) &&
        Objects.equals(this.recurringToken, order.recurringToken) &&
        Objects.equals(this.recurringDescription, order.recurringDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderId, name, purchaseCountry, purchaseCurrency, locale, status, billingAddress, shippingAddress, orderAmount, orderTaxAmount, orderLines, customer, merchantUrls, htmlSnippet, merchantReference1, merchantReference2, startedAt, completedAt, lastModifiedAt, options, attachment, externalPaymentMethods, externalCheckouts, shippingCountries, shippingOptions, merchantData, gui, merchantRequested, selectedShippingOption, recurring, recurringToken, recurringDescription);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    purchaseCountry: ").append(toIndentedString(purchaseCountry)).append("\n");
    sb.append("    purchaseCurrency: ").append(toIndentedString(purchaseCurrency)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    orderAmount: ").append(toIndentedString(orderAmount)).append("\n");
    sb.append("    orderTaxAmount: ").append(toIndentedString(orderTaxAmount)).append("\n");
    sb.append("    orderLines: ").append(toIndentedString(orderLines)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    merchantUrls: ").append(toIndentedString(merchantUrls)).append("\n");
    sb.append("    htmlSnippet: ").append(toIndentedString(htmlSnippet)).append("\n");
    sb.append("    merchantReference1: ").append(toIndentedString(merchantReference1)).append("\n");
    sb.append("    merchantReference2: ").append(toIndentedString(merchantReference2)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    lastModifiedAt: ").append(toIndentedString(lastModifiedAt)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    externalPaymentMethods: ").append(toIndentedString(externalPaymentMethods)).append("\n");
    sb.append("    externalCheckouts: ").append(toIndentedString(externalCheckouts)).append("\n");
    sb.append("    shippingCountries: ").append(toIndentedString(shippingCountries)).append("\n");
    sb.append("    shippingOptions: ").append(toIndentedString(shippingOptions)).append("\n");
    sb.append("    merchantData: ").append(toIndentedString(merchantData)).append("\n");
    sb.append("    gui: ").append(toIndentedString(gui)).append("\n");
    sb.append("    merchantRequested: ").append(toIndentedString(merchantRequested)).append("\n");
    sb.append("    selectedShippingOption: ").append(toIndentedString(selectedShippingOption)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    recurringToken: ").append(toIndentedString(recurringToken)).append("\n");
    sb.append("    recurringDescription: ").append(toIndentedString(recurringDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

