/*
 * HPP
 * Hosted payment page
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.klarna.rest.model.hosted_payment_page;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * OptionsV1
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-10-25T10:11:58.940Z")
public class OptionsV1 {
  @JsonProperty("background_images")
  private List<BackgroundImageV1> backgroundImages = null;

  @JsonProperty("logo_url")
  private String logoUrl = null;

  @JsonProperty("page_title")
  private String pageTitle = null;

  /**
   * Payment method category to show
   */
  public enum PaymentMethodCategoryEnum {
    DIRECT_DEBIT("DIRECT_DEBIT"),
    
    DIRECT_BANK_TRANSFER("DIRECT_BANK_TRANSFER"),
    
    PAY_NOW("PAY_NOW"),
    
    PAY_LATER("PAY_LATER"),
    
    PAY_OVER_TIME("PAY_OVER_TIME");

    private String value;

    PaymentMethodCategoryEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PaymentMethodCategoryEnum fromValue(String text) {
      for (PaymentMethodCategoryEnum b : PaymentMethodCategoryEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("payment_method_category")
  private PaymentMethodCategoryEnum paymentMethodCategory = null;

  /**
   * The type of this purchase
   */
  public enum PurchaseTypeEnum {
    BUY("BUY"),
    
    RENT("RENT"),
    
    BOOK("BOOK"),
    
    SUBSCRIBE("SUBSCRIBE"),
    
    DOWNLOAD("DOWNLOAD"),
    
    ORDER("ORDER"),
    
    CONTINUE("CONTINUE");

    private String value;

    PurchaseTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PurchaseTypeEnum fromValue(String text) {
      for (PurchaseTypeEnum b : PurchaseTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("purchase_type")
  private PurchaseTypeEnum purchaseType = null;

  public OptionsV1 backgroundImages(List<BackgroundImageV1> backgroundImages) {
    this.backgroundImages = backgroundImages;
    return this;
  }

  public OptionsV1 addBackgroundImagesItem(BackgroundImageV1 backgroundImagesItem) {
    if (this.backgroundImages == null) {
      this.backgroundImages = new ArrayList<BackgroundImageV1>();
    }
    this.backgroundImages.add(backgroundImagesItem);
    return this;
  }

   /**
   * Images to use for the background
   * @return backgroundImages
  **/
  @ApiModelProperty(value = "Images to use for the background")
  public List<BackgroundImageV1> getBackgroundImages() {
    return backgroundImages;
  }

  public void setBackgroundImages(List<BackgroundImageV1> backgroundImages) {
    this.backgroundImages = backgroundImages;
  }

  public OptionsV1 logoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

   /**
   * URL for the logo to be included in the HPP page
   * @return logoUrl
  **/
  @ApiModelProperty(example = "https://example.com/logo.jpg", value = "URL for the logo to be included in the HPP page")
  public String getLogoUrl() {
    return logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }

  public OptionsV1 pageTitle(String pageTitle) {
    this.pageTitle = pageTitle;
    return this;
  }

   /**
   * Title for the HPP page
   * @return pageTitle
  **/
  @ApiModelProperty(example = "Complete your purchase", value = "Title for the HPP page")
  public String getPageTitle() {
    return pageTitle;
  }

  public void setPageTitle(String pageTitle) {
    this.pageTitle = pageTitle;
  }

  public OptionsV1 paymentMethodCategory(PaymentMethodCategoryEnum paymentMethodCategory) {
    this.paymentMethodCategory = paymentMethodCategory;
    return this;
  }

   /**
   * Payment method category to show
   * @return paymentMethodCategory
  **/
  @ApiModelProperty(example = "pay_later", value = "Payment method category to show")
  public PaymentMethodCategoryEnum getPaymentMethodCategory() {
    return paymentMethodCategory;
  }

  public void setPaymentMethodCategory(PaymentMethodCategoryEnum paymentMethodCategory) {
    this.paymentMethodCategory = paymentMethodCategory;
  }

  public OptionsV1 purchaseType(PurchaseTypeEnum purchaseType) {
    this.purchaseType = purchaseType;
    return this;
  }

   /**
   * The type of this purchase
   * @return purchaseType
  **/
  @ApiModelProperty(example = "buy", value = "The type of this purchase")
  public PurchaseTypeEnum getPurchaseType() {
    return purchaseType;
  }

  public void setPurchaseType(PurchaseTypeEnum purchaseType) {
    this.purchaseType = purchaseType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptionsV1 optionsV1 = (OptionsV1) o;
    return Objects.equals(this.backgroundImages, optionsV1.backgroundImages) &&
        Objects.equals(this.logoUrl, optionsV1.logoUrl) &&
        Objects.equals(this.pageTitle, optionsV1.pageTitle) &&
        Objects.equals(this.paymentMethodCategory, optionsV1.paymentMethodCategory) &&
        Objects.equals(this.purchaseType, optionsV1.purchaseType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundImages, logoUrl, pageTitle, paymentMethodCategory, purchaseType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptionsV1 {\n");
    
    sb.append("    backgroundImages: ").append(toIndentedString(backgroundImages)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    pageTitle: ").append(toIndentedString(pageTitle)).append("\n");
    sb.append("    paymentMethodCategory: ").append(toIndentedString(paymentMethodCategory)).append("\n");
    sb.append("    purchaseType: ").append(toIndentedString(purchaseType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

