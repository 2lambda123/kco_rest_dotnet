/*
 * Klarna Settlements API
 * This API gives you access to your payouts and transactions.     Resources are split into two broad types:     * Collections, including pagination information:      collections are queryable, typically by the attributes of the sub-resource      as well as pagination.    * Entity resources containing a single entity.
 *
 * OpenAPI spec version: 1.0.0-rc2
 * Contact: integration@klarna.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.klarna.rest.api.settlements.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.klarna.rest.api.settlements.model.SettlementsTotals;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.OffsetDateTime;

/**
 * SettlementsPayout
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-04-03T13:02:14.665Z")
public class SettlementsPayout {
  @JsonProperty("totals")
  private SettlementsTotals totals = null;

  @JsonProperty("payment_reference")
  private String paymentReference = null;

  @JsonProperty("payout_date")
  private OffsetDateTime payoutDate = null;

  @JsonProperty("currency_code")
  private String currencyCode = null;

  /**
   * Whether the amounts are net or gross
   */
  public enum MerchantSettlementTypeEnum {
    GROSS("GROSS"),
    
    NET("NET");

    private String value;

    MerchantSettlementTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MerchantSettlementTypeEnum fromValue(String text) {
      for (MerchantSettlementTypeEnum b : MerchantSettlementTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("merchant_settlement_type")
  private MerchantSettlementTypeEnum merchantSettlementType = null;

  @JsonProperty("merchant_id")
  private String merchantId = null;

  @JsonProperty("transactions")
  private String transactions = null;

  public SettlementsPayout totals(SettlementsTotals totals) {
    this.totals = totals;
    return this;
  }

   /**
   * Get totals
   * @return totals
  **/
  @ApiModelProperty(required = true, value = "")
  public SettlementsTotals getTotals() {
    return totals;
  }

  public void setTotals(SettlementsTotals totals) {
    this.totals = totals;
  }

  public SettlementsPayout paymentReference(String paymentReference) {
    this.paymentReference = paymentReference;
    return this;
  }

   /**
   * The reference id of the payout
   * @return paymentReference
  **/
  @ApiModelProperty(example = "XISA93DJ", required = true, value = "The reference id of the payout")
  public String getPaymentReference() {
    return paymentReference;
  }

  public void setPaymentReference(String paymentReference) {
    this.paymentReference = paymentReference;
  }

  public SettlementsPayout payoutDate(OffsetDateTime payoutDate) {
    this.payoutDate = payoutDate;
    return this;
  }

   /**
   * ISO-8601 formatted date-time string
   * @return payoutDate
  **/
  @ApiModelProperty(example = "2016-12-14T07:52:26Z", required = true, value = "ISO-8601 formatted date-time string")
  public OffsetDateTime getPayoutDate() {
    return payoutDate;
  }

  public void setPayoutDate(OffsetDateTime payoutDate) {
    this.payoutDate = payoutDate;
  }

  public SettlementsPayout currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * ISO-3166 Currency Code.
   * @return currencyCode
  **/
  @ApiModelProperty(example = "USD", required = true, value = "ISO-3166 Currency Code.")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public SettlementsPayout merchantSettlementType(MerchantSettlementTypeEnum merchantSettlementType) {
    this.merchantSettlementType = merchantSettlementType;
    return this;
  }

   /**
   * Whether the amounts are net or gross
   * @return merchantSettlementType
  **/
  @ApiModelProperty(example = "NET", required = true, value = "Whether the amounts are net or gross")
  public MerchantSettlementTypeEnum getMerchantSettlementType() {
    return merchantSettlementType;
  }

  public void setMerchantSettlementType(MerchantSettlementTypeEnum merchantSettlementType) {
    this.merchantSettlementType = merchantSettlementType;
  }

  public SettlementsPayout merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * The merchant id
   * @return merchantId
  **/
  @ApiModelProperty(required = true, value = "The merchant id")
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }

  public SettlementsPayout transactions(String transactions) {
    this.transactions = transactions;
    return this;
  }

   /**
   * Link to the transactions that are part of this payout
   * @return transactions
  **/
  @ApiModelProperty(example = "https://{settlements_api}/transactions?payment_reference=XISA93DJ", value = "Link to the transactions that are part of this payout")
  public String getTransactions() {
    return transactions;
  }

  public void setTransactions(String transactions) {
    this.transactions = transactions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettlementsPayout payout = (SettlementsPayout) o;
    return Objects.equals(this.totals, payout.totals) &&
        Objects.equals(this.paymentReference, payout.paymentReference) &&
        Objects.equals(this.payoutDate, payout.payoutDate) &&
        Objects.equals(this.currencyCode, payout.currencyCode) &&
        Objects.equals(this.merchantSettlementType, payout.merchantSettlementType) &&
        Objects.equals(this.merchantId, payout.merchantId) &&
        Objects.equals(this.transactions, payout.transactions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totals, paymentReference, payoutDate, currencyCode, merchantSettlementType, merchantId, transactions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettlementsPayout {\n");
    
    sb.append("    totals: ").append(toIndentedString(totals)).append("\n");
    sb.append("    paymentReference: ").append(toIndentedString(paymentReference)).append("\n");
    sb.append("    payoutDate: ").append(toIndentedString(payoutDate)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    merchantSettlementType: ").append(toIndentedString(merchantSettlementType)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

