/*
 * Customer Tokens
 * The Customer Token API is used to charge customers with a tokenized Klarna payment method and can be used for recurring purchases, subscriptions and for storing a customer's payment method. Tokens are created using the [generate a customer token](#payments-api-generate-a-consumer-token) call in the payments API.
 *
 * OpenAPI spec version: 3.0
 * Contact: developers-experience@klarna.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.klarna.rest.api.customer_token.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * TokenDirectDebitInformation
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-01-25T13:23:40.795Z")
public class TokenDirectDebitInformation {
  @JsonProperty("brand")
  private String brand = null;

  @JsonProperty("masked_number")
  private String maskedNumber = null;

  public TokenDirectDebitInformation brand(String brand) {
    this.brand = brand;
    return this;
  }

   /**
   * Bank name
   * @return brand
  **/
  @ApiModelProperty(required = true, value = "Bank name")
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }

  public TokenDirectDebitInformation maskedNumber(String maskedNumber) {
    this.maskedNumber = maskedNumber;
    return this;
  }

   /**
   * Masked bank account number
   * @return maskedNumber
  **/
  @ApiModelProperty(example = "**********124", required = true, value = "Masked bank account number")
  public String getMaskedNumber() {
    return maskedNumber;
  }

  public void setMaskedNumber(String maskedNumber) {
    this.maskedNumber = maskedNumber;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenDirectDebitInformation directDebitInformation = (TokenDirectDebitInformation) o;
    return Objects.equals(this.brand, directDebitInformation.brand) &&
        Objects.equals(this.maskedNumber, directDebitInformation.maskedNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brand, maskedNumber);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenDirectDebitInformation {\n");
    
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    maskedNumber: ").append(toIndentedString(maskedNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

