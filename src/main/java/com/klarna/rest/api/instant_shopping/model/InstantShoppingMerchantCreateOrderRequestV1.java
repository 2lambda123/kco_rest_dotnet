/*
 * Klarna Instant Shopping
 * The Instant Shopping API is serving two purposes:  to manage the orders as they result from the Instant Shopping purchase flow  to generate Instant Shopping Button keys necessary for setting up the Instant Shopping flow both onsite and offsite    The 'authorizations' endpoint is relevant to authorize the orders. The 'buttons' endpoint is relevant to manage the button setup options.   Note that as soon as a purchase initiated through Instant Shopping is authorized with Klarna, the order should be read and handled using the Order Management API.    Button Setup Options is the library for creating and maintaining Instant Shopping Button Keys.  The API is accessible through a few different URLS. There are different URLs for testing and for making live purchases as well as different URLs for depending on if you are based in Europe or in the U.S.  All interaction with Klarna's APIs must be done over HTTPS. To authenticate with Klarna you use your API Credentials and HTTP Basic auth.  The credentials consist of two elements:  Username - Consists of your Merchant ID (eid) - a unique number that identifies your e-store, combined with a random string.  Password - a string which is associated with your Merchant ID and is used to authorize use of Klarna's APIs  Note: The API credentials are separate from your Merchant ID, and it is possible to have several API credentials associated with the same Merchant ID.  The credentials should be sent as an authorization header for every request with the username and password.  You receive both your live and test credentials by contacting Klarna sales for your country.  If the credentials are missing or wrong Klarna will respond with 401 Unauthorized. You can read more about HTTP Basic auth in the Wikipedia article. The username and password the username:password in base64. [https://gist.github.com/brandonmwest/a2632d0a65088a20c00a](Examples)   You can read more about Klarna Data types at https://developers.klarna.com/api/#data-types, e.g. the date format is ISO 8601
 *
 * OpenAPI spec version: 1.0.0
 * Contact: instant.shopping.e@klarna.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.klarna.rest.api.instant_shopping.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.klarna.rest.api.instant_shopping.model.InstantShoppingAddressV1;
import com.klarna.rest.api.instant_shopping.model.InstantShoppingAttachmentV1;
import com.klarna.rest.api.instant_shopping.model.InstantShoppingCustomerV1;
import com.klarna.rest.api.instant_shopping.model.InstantShoppingMerchantUrlsV1;
import com.klarna.rest.api.instant_shopping.model.InstantShoppingOrderLineV1;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * InstantShoppingMerchantCreateOrderRequestV1
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-04-10T09:33:39.178Z")
public class InstantShoppingMerchantCreateOrderRequestV1 {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("purchase_country")
  private String purchaseCountry = null;

  @JsonProperty("purchase_currency")
  private String purchaseCurrency = null;

  @JsonProperty("locale")
  private String locale = null;

  @JsonProperty("billing_address")
  private InstantShoppingAddressV1 billingAddress = null;

  @JsonProperty("shipping_address")
  private InstantShoppingAddressV1 shippingAddress = null;

  @JsonProperty("order_amount")
  private Long orderAmount = null;

  @JsonProperty("order_tax_amount")
  private Long orderTaxAmount = null;

  @JsonProperty("order_lines")
  private List<InstantShoppingOrderLineV1> orderLines = new ArrayList<InstantShoppingOrderLineV1>();

  @JsonProperty("merchant_reference1")
  private String merchantReference1 = null;

  @JsonProperty("merchant_reference2")
  private String merchantReference2 = null;

  @JsonProperty("merchant_urls")
  private InstantShoppingMerchantUrlsV1 merchantUrls = null;

  @JsonProperty("customer")
  private InstantShoppingCustomerV1 customer = null;

  @JsonProperty("merchant_data")
  private String merchantData = null;

  @JsonProperty("attachment")
  private InstantShoppingAttachmentV1 attachment = null;

  public InstantShoppingMerchantCreateOrderRequestV1 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The merchant name (max 255 characters).
   * @return name
  **/
  @ApiModelProperty(example = "Women's Fashion", value = "The merchant name (max 255 characters).")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public InstantShoppingMerchantCreateOrderRequestV1 purchaseCountry(String purchaseCountry) {
    this.purchaseCountry = purchaseCountry;
    return this;
  }

   /**
   * ISO 3166 alpha-2 purchase country.
   * @return purchaseCountry
  **/
  @ApiModelProperty(example = "US", required = true, value = "ISO 3166 alpha-2 purchase country.")
  public String getPurchaseCountry() {
    return purchaseCountry;
  }

  public void setPurchaseCountry(String purchaseCountry) {
    this.purchaseCountry = purchaseCountry;
  }

  public InstantShoppingMerchantCreateOrderRequestV1 purchaseCurrency(String purchaseCurrency) {
    this.purchaseCurrency = purchaseCurrency;
    return this;
  }

   /**
   * ISO 4217 purchase currency.
   * @return purchaseCurrency
  **/
  @ApiModelProperty(example = "USD", required = true, value = "ISO 4217 purchase currency.")
  public String getPurchaseCurrency() {
    return purchaseCurrency;
  }

  public void setPurchaseCurrency(String purchaseCurrency) {
    this.purchaseCurrency = purchaseCurrency;
  }

  public InstantShoppingMerchantCreateOrderRequestV1 locale(String locale) {
    this.locale = locale;
    return this;
  }

   /**
   * RFC 1766 customer&#39;s locale.
   * @return locale
  **/
  @ApiModelProperty(example = "en-US", required = true, value = "RFC 1766 customer's locale.")
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }

  public InstantShoppingMerchantCreateOrderRequestV1 billingAddress(InstantShoppingAddressV1 billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Once the customer has provided any data in the checkout iframe, updates to this object will be ignored (without generating an error).
   * @return billingAddress
  **/
  @ApiModelProperty(required = true, value = "Once the customer has provided any data in the checkout iframe, updates to this object will be ignored (without generating an error).")
  public InstantShoppingAddressV1 getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(InstantShoppingAddressV1 billingAddress) {
    this.billingAddress = billingAddress;
  }

  public InstantShoppingMerchantCreateOrderRequestV1 shippingAddress(InstantShoppingAddressV1 shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

   /**
   * Unless the customer has explicitly chosen to enter a separate shipping address, this is a clone of billing_address.
   * @return shippingAddress
  **/
  @ApiModelProperty(value = "Unless the customer has explicitly chosen to enter a separate shipping address, this is a clone of billing_address.")
  public InstantShoppingAddressV1 getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(InstantShoppingAddressV1 shippingAddress) {
    this.shippingAddress = shippingAddress;
  }

  public InstantShoppingMerchantCreateOrderRequestV1 orderAmount(Long orderAmount) {
    this.orderAmount = orderAmount;
    return this;
  }

   /**
   * Non-negative, minor units. Total amount of the order. Must be sum of the order lines and tax amount
   * @return orderAmount
  **/
  @ApiModelProperty(example = "50000", required = true, value = "Non-negative, minor units. Total amount of the order. Must be sum of the order lines and tax amount")
  public Long getOrderAmount() {
    return orderAmount;
  }

  public void setOrderAmount(Long orderAmount) {
    this.orderAmount = orderAmount;
  }

  public InstantShoppingMerchantCreateOrderRequestV1 orderTaxAmount(Long orderTaxAmount) {
    this.orderTaxAmount = orderTaxAmount;
    return this;
  }

   /**
   * Non-negative, minor units. The total tax amount of the order.
   * @return orderTaxAmount
  **/
  @ApiModelProperty(example = "5000", required = true, value = "Non-negative, minor units. The total tax amount of the order.")
  public Long getOrderTaxAmount() {
    return orderTaxAmount;
  }

  public void setOrderTaxAmount(Long orderTaxAmount) {
    this.orderTaxAmount = orderTaxAmount;
  }

  public InstantShoppingMerchantCreateOrderRequestV1 orderLines(List<InstantShoppingOrderLineV1> orderLines) {
    this.orderLines = orderLines;
    return this;
  }

  public InstantShoppingMerchantCreateOrderRequestV1 addOrderLinesItem(InstantShoppingOrderLineV1 orderLinesItem) {
    this.orderLines.add(orderLinesItem);
    return this;
  }

   /**
   * The applicable order lines (max 1000)
   * @return orderLines
  **/
  @ApiModelProperty(required = true, value = "The applicable order lines (max 1000)")
  public List<InstantShoppingOrderLineV1> getOrderLines() {
    return orderLines;
  }

  public void setOrderLines(List<InstantShoppingOrderLineV1> orderLines) {
    this.orderLines = orderLines;
  }

  public InstantShoppingMerchantCreateOrderRequestV1 merchantReference1(String merchantReference1) {
    this.merchantReference1 = merchantReference1;
    return this;
  }

   /**
   * Used for storing merchant&#39;s internal order number or other reference. If set, will be shown on the confirmation page as \&quot;order number\&quot; (max 255 characters).
   * @return merchantReference1
  **/
  @ApiModelProperty(example = "45aa52f387871e3a210645d4", value = "Used for storing merchant's internal order number or other reference. If set, will be shown on the confirmation page as \"order number\" (max 255 characters).")
  public String getMerchantReference1() {
    return merchantReference1;
  }

  public void setMerchantReference1(String merchantReference1) {
    this.merchantReference1 = merchantReference1;
  }

  public InstantShoppingMerchantCreateOrderRequestV1 merchantReference2(String merchantReference2) {
    this.merchantReference2 = merchantReference2;
    return this;
  }

   /**
   * Used for storing merchant&#39;s internal order number or other reference (max 255 characters).
   * @return merchantReference2
  **/
  @ApiModelProperty(example = "45aa52f387871e3a210645d4", value = "Used for storing merchant's internal order number or other reference (max 255 characters).")
  public String getMerchantReference2() {
    return merchantReference2;
  }

  public void setMerchantReference2(String merchantReference2) {
    this.merchantReference2 = merchantReference2;
  }

  public InstantShoppingMerchantCreateOrderRequestV1 merchantUrls(InstantShoppingMerchantUrlsV1 merchantUrls) {
    this.merchantUrls = merchantUrls;
    return this;
  }

   /**
   * The merchant_urls object.
   * @return merchantUrls
  **/
  @ApiModelProperty(value = "The merchant_urls object.")
  public InstantShoppingMerchantUrlsV1 getMerchantUrls() {
    return merchantUrls;
  }

  public void setMerchantUrls(InstantShoppingMerchantUrlsV1 merchantUrls) {
    this.merchantUrls = merchantUrls;
  }

  public InstantShoppingMerchantCreateOrderRequestV1 customer(InstantShoppingCustomerV1 customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Information about the liable customer of the order
   * @return customer
  **/
  @ApiModelProperty(value = "Information about the liable customer of the order")
  public InstantShoppingCustomerV1 getCustomer() {
    return customer;
  }

  public void setCustomer(InstantShoppingCustomerV1 customer) {
    this.customer = customer;
  }

  public InstantShoppingMerchantCreateOrderRequestV1 merchantData(String merchantData) {
    this.merchantData = merchantData;
    return this;
  }

   /**
   * Pass through field (max 1024 characters).
   * @return merchantData
  **/
  @ApiModelProperty(value = "Pass through field (max 1024 characters).")
  public String getMerchantData() {
    return merchantData;
  }

  public void setMerchantData(String merchantData) {
    this.merchantData = merchantData;
  }

  public InstantShoppingMerchantCreateOrderRequestV1 attachment(InstantShoppingAttachmentV1 attachment) {
    this.attachment = attachment;
    return this;
  }

   /**
   * Additional purchase information required for some industries.
   * @return attachment
  **/
  @ApiModelProperty(value = "Additional purchase information required for some industries.")
  public InstantShoppingAttachmentV1 getAttachment() {
    return attachment;
  }

  public void setAttachment(InstantShoppingAttachmentV1 attachment) {
    this.attachment = attachment;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstantShoppingMerchantCreateOrderRequestV1 merchantCreateOrderRequestV1 = (InstantShoppingMerchantCreateOrderRequestV1) o;
    return Objects.equals(this.name, merchantCreateOrderRequestV1.name) &&
        Objects.equals(this.purchaseCountry, merchantCreateOrderRequestV1.purchaseCountry) &&
        Objects.equals(this.purchaseCurrency, merchantCreateOrderRequestV1.purchaseCurrency) &&
        Objects.equals(this.locale, merchantCreateOrderRequestV1.locale) &&
        Objects.equals(this.billingAddress, merchantCreateOrderRequestV1.billingAddress) &&
        Objects.equals(this.shippingAddress, merchantCreateOrderRequestV1.shippingAddress) &&
        Objects.equals(this.orderAmount, merchantCreateOrderRequestV1.orderAmount) &&
        Objects.equals(this.orderTaxAmount, merchantCreateOrderRequestV1.orderTaxAmount) &&
        Objects.equals(this.orderLines, merchantCreateOrderRequestV1.orderLines) &&
        Objects.equals(this.merchantReference1, merchantCreateOrderRequestV1.merchantReference1) &&
        Objects.equals(this.merchantReference2, merchantCreateOrderRequestV1.merchantReference2) &&
        Objects.equals(this.merchantUrls, merchantCreateOrderRequestV1.merchantUrls) &&
        Objects.equals(this.customer, merchantCreateOrderRequestV1.customer) &&
        Objects.equals(this.merchantData, merchantCreateOrderRequestV1.merchantData) &&
        Objects.equals(this.attachment, merchantCreateOrderRequestV1.attachment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, purchaseCountry, purchaseCurrency, locale, billingAddress, shippingAddress, orderAmount, orderTaxAmount, orderLines, merchantReference1, merchantReference2, merchantUrls, customer, merchantData, attachment);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstantShoppingMerchantCreateOrderRequestV1 {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    purchaseCountry: ").append(toIndentedString(purchaseCountry)).append("\n");
    sb.append("    purchaseCurrency: ").append(toIndentedString(purchaseCurrency)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    orderAmount: ").append(toIndentedString(orderAmount)).append("\n");
    sb.append("    orderTaxAmount: ").append(toIndentedString(orderTaxAmount)).append("\n");
    sb.append("    orderLines: ").append(toIndentedString(orderLines)).append("\n");
    sb.append("    merchantReference1: ").append(toIndentedString(merchantReference1)).append("\n");
    sb.append("    merchantReference2: ").append(toIndentedString(merchantReference2)).append("\n");
    sb.append("    merchantUrls: ").append(toIndentedString(merchantUrls)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    merchantData: ").append(toIndentedString(merchantData)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

