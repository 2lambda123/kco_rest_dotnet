/*
 * Klarna Instant Shopping
 * The Instant Shopping API is serving two purposes:  to manage the orders as they result from the Instant Shopping purchase flow  to generate Instant Shopping Button keys necessary for setting up the Instant Shopping flow both onsite and offsite    The 'authorizations' endpoint is relevant to authorize the orders. The 'buttons' endpoint is relevant to manage the button setup options.   Note that as soon as a purchase initiated through Instant Shopping is authorized with Klarna, the order should be read and handled using the Order Management API.    Button Setup Options is the library for creating and maintaining Instant Shopping Button Keys.  The API is accessible through a few different URLS. There are different URLs for testing and for making live purchases as well as different URLs for depending on if you are based in Europe or in the U.S.  All interaction with Klarna's APIs must be done over HTTPS. To authenticate with Klarna you use your API Credentials and HTTP Basic auth.  The credentials consist of two elements:  Username - Consists of your Merchant ID (eid) - a unique number that identifies your e-store, combined with a random string.  Password - a string which is associated with your Merchant ID and is used to authorize use of Klarna's APIs  Note: The API credentials are separate from your Merchant ID, and it is possible to have several API credentials associated with the same Merchant ID.  The credentials should be sent as an authorization header for every request with the username and password.  You receive both your live and test credentials by contacting Klarna sales for your country.  If the credentials are missing or wrong Klarna will respond with 401 Unauthorized. You can read more about HTTP Basic auth in the Wikipedia article. The username and password the username:password in base64. [https://gist.github.com/brandonmwest/a2632d0a65088a20c00a](Examples)   You can read more about Klarna Data types at https://developers.klarna.com/api/#data-types, e.g. the date format is ISO 8601
 *
 * OpenAPI spec version: 1.0.0
 * Contact: instant.shopping.e@klarna.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.klarna.rest.api.instant_shopping.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 *  
 */
@ApiModel(description = " ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-04-10T09:33:39.178Z")
public class InstantShoppingShippingOptionV1 {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("promo")
  private String promo = null;

  @JsonProperty("price")
  private Long price = null;

  @JsonProperty("tax_amount")
  private Long taxAmount = null;

  @JsonProperty("tax_rate")
  private Long taxRate = null;

  @JsonProperty("preselected")
  private Boolean preselected = null;

  /**
   * Type of basic shipping method
   */
  public enum ShippingMethodEnum {
    PICKUPSTORE("PICKUPSTORE"),
    
    HOME("HOME"),
    
    BOXREG("BOXREG"),
    
    BOXUNREG("BOXUNREG"),
    
    PICKUPPOINT("PICKUPPOINT"),
    
    OWN("OWN"),
    
    DHL_PACKSTATION("DHL_PACKSTATION"),
    
    OTHER("OTHER"),
    
    UNDEFINED("UNDEFINED");

    private String value;

    ShippingMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ShippingMethodEnum fromValue(String text) {
      for (ShippingMethodEnum b : ShippingMethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("shipping_method")
  private ShippingMethodEnum shippingMethod = null;

  public InstantShoppingShippingOptionV1 id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Shipping option identifier
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Shipping option identifier")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public InstantShoppingShippingOptionV1 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of shipping option
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Name of shipping option")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public InstantShoppingShippingOptionV1 description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of shipping option
   * @return description
  **/
  @ApiModelProperty(value = "Description of shipping option")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public InstantShoppingShippingOptionV1 promo(String promo) {
    this.promo = promo;
    return this;
  }

   /**
   * Promotion name. To be used if this shipping option is promotional
   * @return promo
  **/
  @ApiModelProperty(value = "Promotion name. To be used if this shipping option is promotional")
  public String getPromo() {
    return promo;
  }

  public void setPromo(String promo) {
    this.promo = promo;
  }

  public InstantShoppingShippingOptionV1 price(Long price) {
    this.price = price;
    return this;
  }

   /**
   * Price in cents including tax
   * @return price
  **/
  @ApiModelProperty(required = true, value = "Price in cents including tax")
  public Long getPrice() {
    return price;
  }

  public void setPrice(Long price) {
    this.price = price;
  }

  public InstantShoppingShippingOptionV1 taxAmount(Long taxAmount) {
    this.taxAmount = taxAmount;
    return this;
  }

   /**
   * Amount of tax
   * @return taxAmount
  **/
  @ApiModelProperty(required = true, value = "Amount of tax")
  public Long getTaxAmount() {
    return taxAmount;
  }

  public void setTaxAmount(Long taxAmount) {
    this.taxAmount = taxAmount;
  }

  public InstantShoppingShippingOptionV1 taxRate(Long taxRate) {
    this.taxRate = taxRate;
    return this;
  }

   /**
   * Non-negative. In percent, two implicit decimals. I.e 2500 &#x3D; 25%
   * minimum: 0
   * @return taxRate
  **/
  @ApiModelProperty(required = true, value = "Non-negative. In percent, two implicit decimals. I.e 2500 = 25%")
  public Long getTaxRate() {
    return taxRate;
  }

  public void setTaxRate(Long taxRate) {
    this.taxRate = taxRate;
  }

  public InstantShoppingShippingOptionV1 preselected(Boolean preselected) {
    this.preselected = preselected;
    return this;
  }

   /**
   * If the option should be preselected
   * @return preselected
  **/
  @ApiModelProperty(value = "If the option should be preselected")
  public Boolean isPreselected() {
    return preselected;
  }

  public void setPreselected(Boolean preselected) {
    this.preselected = preselected;
  }

  public InstantShoppingShippingOptionV1 shippingMethod(ShippingMethodEnum shippingMethod) {
    this.shippingMethod = shippingMethod;
    return this;
  }

   /**
   * Type of basic shipping method
   * @return shippingMethod
  **/
  @ApiModelProperty(value = "Type of basic shipping method")
  public ShippingMethodEnum getShippingMethod() {
    return shippingMethod;
  }

  public void setShippingMethod(ShippingMethodEnum shippingMethod) {
    this.shippingMethod = shippingMethod;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstantShoppingShippingOptionV1 shippingOptionV1 = (InstantShoppingShippingOptionV1) o;
    return Objects.equals(this.id, shippingOptionV1.id) &&
        Objects.equals(this.name, shippingOptionV1.name) &&
        Objects.equals(this.description, shippingOptionV1.description) &&
        Objects.equals(this.promo, shippingOptionV1.promo) &&
        Objects.equals(this.price, shippingOptionV1.price) &&
        Objects.equals(this.taxAmount, shippingOptionV1.taxAmount) &&
        Objects.equals(this.taxRate, shippingOptionV1.taxRate) &&
        Objects.equals(this.preselected, shippingOptionV1.preselected) &&
        Objects.equals(this.shippingMethod, shippingOptionV1.shippingMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, promo, price, taxAmount, taxRate, preselected, shippingMethod);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstantShoppingShippingOptionV1 {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    promo: ").append(toIndentedString(promo)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    preselected: ").append(toIndentedString(preselected)).append("\n");
    sb.append("    shippingMethod: ").append(toIndentedString(shippingMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

