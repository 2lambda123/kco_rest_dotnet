/*
 * Klarna Instant Shopping
 * The Instant Shopping API is serving two purposes:  to manage the orders as they result from the Instant Shopping purchase flow  to generate Instant Shopping Button keys necessary for setting up the Instant Shopping flow both onsite and offsite    The 'authorizations' endpoint is relevant to authorize the orders. The 'buttons' endpoint is relevant to manage the button setup options.   Note that as soon as a purchase initiated through Instant Shopping is authorized with Klarna, the order should be read and handled using the Order Management API.    Button Setup Options is the library for creating and maintaining Instant Shopping Button Keys.  The API is accessible through a few different URLS. There are different URLs for testing and for making live purchases as well as different URLs for depending on if you are based in Europe or in the U.S.  All interaction with Klarna's APIs must be done over HTTPS. To authenticate with Klarna you use your API Credentials and HTTP Basic auth.  The credentials consist of two elements:  Username - Consists of your Merchant ID (eid) - a unique number that identifies your e-store, combined with a random string.  Password - a string which is associated with your Merchant ID and is used to authorize use of Klarna's APIs  Note: The API credentials are separate from your Merchant ID, and it is possible to have several API credentials associated with the same Merchant ID.  The credentials should be sent as an authorization header for every request with the username and password.  You receive both your live and test credentials by contacting Klarna sales for your country.  If the credentials are missing or wrong Klarna will respond with 401 Unauthorized. You can read more about HTTP Basic auth in the Wikipedia article. The username and password the username:password in base64. [https://gist.github.com/brandonmwest/a2632d0a65088a20c00a](Examples)   You can read more about Klarna Data types at https://developers.klarna.com/api/#data-types, e.g. the date format is ISO 8601
 *
 * OpenAPI spec version: 1.0.0
 * Contact: instant.shopping.e@klarna.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.klarna.rest.api.instant_shopping.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 *  
 */
@ApiModel(description = " ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-04-10T09:33:39.178Z")
public class InstantShoppingOptionsV1 {
  @JsonProperty("allow_separate_shipping_address")
  private Boolean allowSeparateShippingAddress = false;

  @JsonProperty("date_of_birth_mandatory")
  private Boolean dateOfBirthMandatory = false;

  @JsonProperty("phone_mandatory")
  private Boolean phoneMandatory = false;

  @JsonProperty("national_identification_number_mandatory")
  private Boolean nationalIdentificationNumberMandatory = false;

  @JsonProperty("title_mandatory")
  private Boolean titleMandatory = false;

  public InstantShoppingOptionsV1 allowSeparateShippingAddress(Boolean allowSeparateShippingAddress) {
    this.allowSeparateShippingAddress = allowSeparateShippingAddress;
    return this;
  }

   /**
   * If set to true the consumer can enter separate shipping address
   * @return allowSeparateShippingAddress
  **/
  @ApiModelProperty(value = "If set to true the consumer can enter separate shipping address")
  public Boolean isAllowSeparateShippingAddress() {
    return allowSeparateShippingAddress;
  }

  public void setAllowSeparateShippingAddress(Boolean allowSeparateShippingAddress) {
    this.allowSeparateShippingAddress = allowSeparateShippingAddress;
  }

  public InstantShoppingOptionsV1 dateOfBirthMandatory(Boolean dateOfBirthMandatory) {
    this.dateOfBirthMandatory = dateOfBirthMandatory;
    return this;
  }

   /**
   * Makes the date of birth mandatory in the address form
   * @return dateOfBirthMandatory
  **/
  @ApiModelProperty(value = "Makes the date of birth mandatory in the address form")
  public Boolean isDateOfBirthMandatory() {
    return dateOfBirthMandatory;
  }

  public void setDateOfBirthMandatory(Boolean dateOfBirthMandatory) {
    this.dateOfBirthMandatory = dateOfBirthMandatory;
  }

  public InstantShoppingOptionsV1 phoneMandatory(Boolean phoneMandatory) {
    this.phoneMandatory = phoneMandatory;
    return this;
  }

   /**
   * Makes the phone mandatory in the address form
   * @return phoneMandatory
  **/
  @ApiModelProperty(value = "Makes the phone mandatory in the address form")
  public Boolean isPhoneMandatory() {
    return phoneMandatory;
  }

  public void setPhoneMandatory(Boolean phoneMandatory) {
    this.phoneMandatory = phoneMandatory;
  }

  public InstantShoppingOptionsV1 nationalIdentificationNumberMandatory(Boolean nationalIdentificationNumberMandatory) {
    this.nationalIdentificationNumberMandatory = nationalIdentificationNumberMandatory;
    return this;
  }

   /**
   * Set to true for purchases that MUST have a national insurance number
   * @return nationalIdentificationNumberMandatory
  **/
  @ApiModelProperty(value = "Set to true for purchases that MUST have a national insurance number")
  public Boolean isNationalIdentificationNumberMandatory() {
    return nationalIdentificationNumberMandatory;
  }

  public void setNationalIdentificationNumberMandatory(Boolean nationalIdentificationNumberMandatory) {
    this.nationalIdentificationNumberMandatory = nationalIdentificationNumberMandatory;
  }

  public InstantShoppingOptionsV1 titleMandatory(Boolean titleMandatory) {
    this.titleMandatory = titleMandatory;
    return this;
  }

   /**
   * \&quot;Makes the phone mandatory in the address form
   * @return titleMandatory
  **/
  @ApiModelProperty(value = "\"Makes the phone mandatory in the address form")
  public Boolean isTitleMandatory() {
    return titleMandatory;
  }

  public void setTitleMandatory(Boolean titleMandatory) {
    this.titleMandatory = titleMandatory;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstantShoppingOptionsV1 optionsV1 = (InstantShoppingOptionsV1) o;
    return Objects.equals(this.allowSeparateShippingAddress, optionsV1.allowSeparateShippingAddress) &&
        Objects.equals(this.dateOfBirthMandatory, optionsV1.dateOfBirthMandatory) &&
        Objects.equals(this.phoneMandatory, optionsV1.phoneMandatory) &&
        Objects.equals(this.nationalIdentificationNumberMandatory, optionsV1.nationalIdentificationNumberMandatory) &&
        Objects.equals(this.titleMandatory, optionsV1.titleMandatory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowSeparateShippingAddress, dateOfBirthMandatory, phoneMandatory, nationalIdentificationNumberMandatory, titleMandatory);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstantShoppingOptionsV1 {\n");
    
    sb.append("    allowSeparateShippingAddress: ").append(toIndentedString(allowSeparateShippingAddress)).append("\n");
    sb.append("    dateOfBirthMandatory: ").append(toIndentedString(dateOfBirthMandatory)).append("\n");
    sb.append("    phoneMandatory: ").append(toIndentedString(phoneMandatory)).append("\n");
    sb.append("    nationalIdentificationNumberMandatory: ").append(toIndentedString(nationalIdentificationNumberMandatory)).append("\n");
    sb.append("    titleMandatory: ").append(toIndentedString(titleMandatory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

