/*
 * Klarna Instant Shopping
 * The Instant Shopping API is serving two purposes:  to manage the orders as they result from the Instant Shopping purchase flow  to generate Instant Shopping Button keys necessary for setting up the Instant Shopping flow both onsite and offsite    The 'authorizations' endpoint is relevant to authorize the orders. The 'buttons' endpoint is relevant to manage the button setup options.   Note that as soon as a purchase initiated through Instant Shopping is authorized with Klarna, the order should be read and handled using the Order Management API.    Button Setup Options is the library for creating and maintaining Instant Shopping Button Keys.  The API is accessible through a few different URLS. There are different URLs for testing and for making live purchases as well as different URLs for depending on if you are based in Europe or in the U.S.  All interaction with Klarna's APIs must be done over HTTPS. To authenticate with Klarna you use your API Credentials and HTTP Basic auth.  The credentials consist of two elements:  Username - Consists of your Merchant ID (eid) - a unique number that identifies your e-store, combined with a random string.  Password - a string which is associated with your Merchant ID and is used to authorize use of Klarna's APIs  Note: The API credentials are separate from your Merchant ID, and it is possible to have several API credentials associated with the same Merchant ID.  The credentials should be sent as an authorization header for every request with the username and password.  You receive both your live and test credentials by contacting Klarna sales for your country.  If the credentials are missing or wrong Klarna will respond with 401 Unauthorized. You can read more about HTTP Basic auth in the Wikipedia article. The username and password the username:password in base64. [https://gist.github.com/brandonmwest/a2632d0a65088a20c00a](Examples)   You can read more about Klarna Data types at https://developers.klarna.com/api/#data-types, e.g. the date format is ISO 8601
 *
 * OpenAPI spec version: 1.0.0
 * Contact: instant.shopping.e@klarna.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.klarna.rest.api.instant_shopping.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.klarna.rest.api.instant_shopping.model.InstantShoppingAttachmentV1;
import com.klarna.rest.api.instant_shopping.model.InstantShoppingBrandingOptionsV1;
import com.klarna.rest.api.instant_shopping.model.InstantShoppingItemV1;
import com.klarna.rest.api.instant_shopping.model.InstantShoppingMerchantRequestButtonSetupOptionsV1;
import com.klarna.rest.api.instant_shopping.model.InstantShoppingMerchantUrlsV1;
import com.klarna.rest.api.instant_shopping.model.InstantShoppingOptionsV1;
import com.klarna.rest.api.instant_shopping.model.InstantShoppingOrderLineV1;
import com.klarna.rest.api.instant_shopping.model.InstantShoppingShippingAttributesV1;
import com.klarna.rest.api.instant_shopping.model.InstantShoppingShippingOptionV1;
import com.klarna.rest.api.instant_shopping.model.InstantShoppingStylingOptionsV1;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * ButtonSetupOptions defines the attributes for a button in Instant Shopping.
 */
@ApiModel(description = "ButtonSetupOptions defines the attributes for a button in Instant Shopping.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-01-20T10:47:29.611Z")
public class InstantShoppingButtonSetupOptionsV1 {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("disabled")
  private Boolean disabled = null;

  @JsonProperty("merchant_urls")
  private InstantShoppingMerchantUrlsV1 merchantUrls = null;

  @JsonProperty("purchase_currency")
  private String purchaseCurrency = null;

  @JsonProperty("purchase_country")
  private String purchaseCountry = null;

  @JsonProperty("billing_countries")
  private List<String> billingCountries = null;

  @JsonProperty("shipping_countries")
  private List<String> shippingCountries = null;

  @JsonProperty("locale")
  private String locale = null;

  @JsonProperty("merchant_reference1")
  private String merchantReference1 = null;

  @JsonProperty("merchant_reference2")
  private String merchantReference2 = null;

  @JsonProperty("options")
  private InstantShoppingOptionsV1 options = null;

  @JsonProperty("merchant_data")
  private String merchantData = null;

  @JsonProperty("attachment")
  private InstantShoppingAttachmentV1 attachment = null;

  @JsonProperty("order_lines")
  private List<InstantShoppingOrderLineV1> orderLines = null;

  @JsonProperty("items")
  private List<InstantShoppingItemV1> items = null;

  @JsonProperty("shipping_options")
  private List<InstantShoppingShippingOptionV1> shippingOptions = null;

  @JsonProperty("shipping_attributes")
  private InstantShoppingShippingAttributesV1 shippingAttributes = null;

  @JsonProperty("styling")
  private InstantShoppingStylingOptionsV1 styling = null;

  @JsonProperty("button_key")
  private String buttonKey = null;

  public InstantShoppingButtonSetupOptionsV1 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the button key.
   * @return name
  **/
  @ApiModelProperty(example = "Blogger X campaign", value = "Name of the button key.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public InstantShoppingButtonSetupOptionsV1 disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

   /**
   * Controls the visibility of an Instant Shopping button
   * @return disabled
  **/
  @ApiModelProperty(example = "false", value = "Controls the visibility of an Instant Shopping button")
  public Boolean isDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }

  public InstantShoppingButtonSetupOptionsV1 merchantUrls(InstantShoppingMerchantUrlsV1 merchantUrls) {
    this.merchantUrls = merchantUrls;
    return this;
  }

   /**
   *  
   * @return merchantUrls
  **/
  @ApiModelProperty(required = true, value = " ")
  public InstantShoppingMerchantUrlsV1 getMerchantUrls() {
    return merchantUrls;
  }

  public void setMerchantUrls(InstantShoppingMerchantUrlsV1 merchantUrls) {
    this.merchantUrls = merchantUrls;
  }

  public InstantShoppingButtonSetupOptionsV1 purchaseCurrency(String purchaseCurrency) {
    this.purchaseCurrency = purchaseCurrency;
    return this;
  }

   /**
   * Get purchaseCurrency
   * @return purchaseCurrency
  **/
  @ApiModelProperty(example = "SEK", value = "")
  public String getPurchaseCurrency() {
    return purchaseCurrency;
  }

  public void setPurchaseCurrency(String purchaseCurrency) {
    this.purchaseCurrency = purchaseCurrency;
  }

  public InstantShoppingButtonSetupOptionsV1 purchaseCountry(String purchaseCountry) {
    this.purchaseCountry = purchaseCountry;
    return this;
  }

   /**
   * ISO 3166 alpha-2 purchase country
   * @return purchaseCountry
  **/
  @ApiModelProperty(example = "SE", value = "ISO 3166 alpha-2 purchase country")
  public String getPurchaseCountry() {
    return purchaseCountry;
  }

  public void setPurchaseCountry(String purchaseCountry) {
    this.purchaseCountry = purchaseCountry;
  }

  public InstantShoppingButtonSetupOptionsV1 billingCountries(List<String> billingCountries) {
    this.billingCountries = billingCountries;
    return this;
  }

  public InstantShoppingButtonSetupOptionsV1 addBillingCountriesItem(String billingCountriesItem) {
    if (this.billingCountries == null) {
      this.billingCountries = new ArrayList<String>();
    }
    this.billingCountries.add(billingCountriesItem);
    return this;
  }

   /**
   * A list of countries (ISO 3166 alpha-2) to specify allowed billing countries.
   * @return billingCountries
  **/
  @ApiModelProperty(example = "[\"SE\",\"NO\",\"FI\"]", value = "A list of countries (ISO 3166 alpha-2) to specify allowed billing countries.")
  public List<String> getBillingCountries() {
    return billingCountries;
  }

  public void setBillingCountries(List<String> billingCountries) {
    this.billingCountries = billingCountries;
  }

  public InstantShoppingButtonSetupOptionsV1 shippingCountries(List<String> shippingCountries) {
    this.shippingCountries = shippingCountries;
    return this;
  }

  public InstantShoppingButtonSetupOptionsV1 addShippingCountriesItem(String shippingCountriesItem) {
    if (this.shippingCountries == null) {
      this.shippingCountries = new ArrayList<String>();
    }
    this.shippingCountries.add(shippingCountriesItem);
    return this;
  }

   /**
   * A list of countries (ISO 3166 alpha-2). Default is purchase_country only.
   * @return shippingCountries
  **/
  @ApiModelProperty(example = "[\"SE\",\"NO\",\"FI\"]", value = "A list of countries (ISO 3166 alpha-2). Default is purchase_country only.")
  public List<String> getShippingCountries() {
    return shippingCountries;
  }

  public void setShippingCountries(List<String> shippingCountries) {
    this.shippingCountries = shippingCountries;
  }

  public InstantShoppingButtonSetupOptionsV1 locale(String locale) {
    this.locale = locale;
    return this;
  }

   /**
   * RFC 1766 customer&#39;s locale.
   * @return locale
  **/
  @ApiModelProperty(example = "en-SE", value = "RFC 1766 customer's locale.")
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }

  public InstantShoppingButtonSetupOptionsV1 merchantReference1(String merchantReference1) {
    this.merchantReference1 = merchantReference1;
    return this;
  }

   /**
   * Used for storing merchant&#39;s internal order number or other reference
   * @return merchantReference1
  **/
  @ApiModelProperty(example = "45aa52f387871e3a210645d4", value = "Used for storing merchant's internal order number or other reference")
  public String getMerchantReference1() {
    return merchantReference1;
  }

  public void setMerchantReference1(String merchantReference1) {
    this.merchantReference1 = merchantReference1;
  }

  public InstantShoppingButtonSetupOptionsV1 merchantReference2(String merchantReference2) {
    this.merchantReference2 = merchantReference2;
    return this;
  }

   /**
   * Used for storing merchant&#39;s internal order number or other reference.
   * @return merchantReference2
  **/
  @ApiModelProperty(example = "45aa52f387871e3a210645d4", value = "Used for storing merchant's internal order number or other reference.")
  public String getMerchantReference2() {
    return merchantReference2;
  }

  public void setMerchantReference2(String merchantReference2) {
    this.merchantReference2 = merchantReference2;
  }

  public InstantShoppingButtonSetupOptionsV1 options(InstantShoppingOptionsV1 options) {
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @ApiModelProperty(value = "")
  public InstantShoppingOptionsV1 getOptions() {
    return options;
  }

  public void setOptions(InstantShoppingOptionsV1 options) {
    this.options = options;
  }

  public InstantShoppingButtonSetupOptionsV1 merchantData(String merchantData) {
    this.merchantData = merchantData;
    return this;
  }

   /**
   * Pass through field (max 1024 characters).
   * @return merchantData
  **/
  @ApiModelProperty(example = "some reference", value = "Pass through field (max 1024 characters).")
  public String getMerchantData() {
    return merchantData;
  }

  public void setMerchantData(String merchantData) {
    this.merchantData = merchantData;
  }

  public InstantShoppingButtonSetupOptionsV1 attachment(InstantShoppingAttachmentV1 attachment) {
    this.attachment = attachment;
    return this;
  }

   /**
   * Additional purchase information required for some industries.
   * @return attachment
  **/
  @ApiModelProperty(value = "Additional purchase information required for some industries.")
  public InstantShoppingAttachmentV1 getAttachment() {
    return attachment;
  }

  public void setAttachment(InstantShoppingAttachmentV1 attachment) {
    this.attachment = attachment;
  }

  public InstantShoppingButtonSetupOptionsV1 orderLines(List<InstantShoppingOrderLineV1> orderLines) {
    this.orderLines = orderLines;
    return this;
  }

  public InstantShoppingButtonSetupOptionsV1 addOrderLinesItem(InstantShoppingOrderLineV1 orderLinesItem) {
    if (this.orderLines == null) {
      this.orderLines = new ArrayList<InstantShoppingOrderLineV1>();
    }
    this.orderLines.add(orderLinesItem);
    return this;
  }

   /**
   * The applicable order lines. Max 10000
   * @return orderLines
  **/
  @ApiModelProperty(value = "The applicable order lines. Max 10000")
  public List<InstantShoppingOrderLineV1> getOrderLines() {
    return orderLines;
  }

  public void setOrderLines(List<InstantShoppingOrderLineV1> orderLines) {
    this.orderLines = orderLines;
  }

  public InstantShoppingButtonSetupOptionsV1 items(List<InstantShoppingItemV1> items) {
    this.items = items;
    return this;
  }

  public InstantShoppingButtonSetupOptionsV1 addItemsItem(InstantShoppingItemV1 itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<InstantShoppingItemV1>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * List of elements, each describe every possible product variation as a unique combination of product attributes, e.g. color, size, material.
   * @return items
  **/
  @ApiModelProperty(value = "List of elements, each describe every possible product variation as a unique combination of product attributes, e.g. color, size, material.")
  public List<InstantShoppingItemV1> getItems() {
    return items;
  }

  public void setItems(List<InstantShoppingItemV1> items) {
    this.items = items;
  }

  public InstantShoppingButtonSetupOptionsV1 shippingOptions(List<InstantShoppingShippingOptionV1> shippingOptions) {
    this.shippingOptions = shippingOptions;
    return this;
  }

  public InstantShoppingButtonSetupOptionsV1 addShippingOptionsItem(InstantShoppingShippingOptionV1 shippingOptionsItem) {
    if (this.shippingOptions == null) {
      this.shippingOptions = new ArrayList<InstantShoppingShippingOptionV1>();
    }
    this.shippingOptions.add(shippingOptionsItem);
    return this;
  }

   /**
   * A list of shipping options available for this order.
   * @return shippingOptions
  **/
  @ApiModelProperty(value = "A list of shipping options available for this order.")
  public List<InstantShoppingShippingOptionV1> getShippingOptions() {
    return shippingOptions;
  }

  public void setShippingOptions(List<InstantShoppingShippingOptionV1> shippingOptions) {
    this.shippingOptions = shippingOptions;
  }

  public InstantShoppingButtonSetupOptionsV1 shippingAttributes(InstantShoppingShippingAttributesV1 shippingAttributes) {
    this.shippingAttributes = shippingAttributes;
    return this;
  }

   /**
   * Shipping attributes of this item
   * @return shippingAttributes
  **/
  @ApiModelProperty(value = "Shipping attributes of this item")
  public InstantShoppingShippingAttributesV1 getShippingAttributes() {
    return shippingAttributes;
  }

  public void setShippingAttributes(InstantShoppingShippingAttributesV1 shippingAttributes) {
    this.shippingAttributes = shippingAttributes;
  }

  public InstantShoppingButtonSetupOptionsV1 styling(InstantShoppingStylingOptionsV1 styling) {
    this.styling = styling;
    return this;
  }

   /**
   * Get styling
   * @return styling
  **/
  @ApiModelProperty(value = "")
  public InstantShoppingStylingOptionsV1 getStyling() {
    return styling;
  }

  public void setStyling(InstantShoppingStylingOptionsV1 styling) {
    this.styling = styling;
  }

  public InstantShoppingButtonSetupOptionsV1 buttonKey(String buttonKey) {
    this.buttonKey = buttonKey;
    return this;
  }

   /**
   * Identifier of the button key. Readonly value. Set by the server.
   * @return buttonKey
  **/
  @ApiModelProperty(example = "123e4567-e89b-12d3-a456-426655440000", value = "Identifier of the button key. Readonly value. Set by the server.")
  public String getButtonKey() {
    return buttonKey;
  }

  public void setButtonKey(String buttonKey) {
    this.buttonKey = buttonKey;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstantShoppingButtonSetupOptionsV1 buttonSetupOptionsV1 = (InstantShoppingButtonSetupOptionsV1) o;
    return Objects.equals(this.name, buttonSetupOptionsV1.name) &&
        Objects.equals(this.disabled, buttonSetupOptionsV1.disabled) &&
        Objects.equals(this.merchantUrls, buttonSetupOptionsV1.merchantUrls) &&
        Objects.equals(this.purchaseCurrency, buttonSetupOptionsV1.purchaseCurrency) &&
        Objects.equals(this.purchaseCountry, buttonSetupOptionsV1.purchaseCountry) &&
        Objects.equals(this.billingCountries, buttonSetupOptionsV1.billingCountries) &&
        Objects.equals(this.shippingCountries, buttonSetupOptionsV1.shippingCountries) &&
        Objects.equals(this.locale, buttonSetupOptionsV1.locale) &&
        Objects.equals(this.merchantReference1, buttonSetupOptionsV1.merchantReference1) &&
        Objects.equals(this.merchantReference2, buttonSetupOptionsV1.merchantReference2) &&
        Objects.equals(this.options, buttonSetupOptionsV1.options) &&
        Objects.equals(this.merchantData, buttonSetupOptionsV1.merchantData) &&
        Objects.equals(this.attachment, buttonSetupOptionsV1.attachment) &&
        Objects.equals(this.orderLines, buttonSetupOptionsV1.orderLines) &&
        Objects.equals(this.items, buttonSetupOptionsV1.items) &&
        Objects.equals(this.shippingOptions, buttonSetupOptionsV1.shippingOptions) &&
        Objects.equals(this.shippingAttributes, buttonSetupOptionsV1.shippingAttributes) &&
        Objects.equals(this.styling, buttonSetupOptionsV1.styling) &&
        Objects.equals(this.buttonKey, buttonSetupOptionsV1.buttonKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, disabled, merchantUrls, purchaseCurrency, purchaseCountry, billingCountries, shippingCountries, locale, merchantReference1, merchantReference2, options, merchantData, attachment, orderLines, items, shippingOptions, shippingAttributes, styling, buttonKey);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstantShoppingButtonSetupOptionsV1 {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    merchantUrls: ").append(toIndentedString(merchantUrls)).append("\n");
    sb.append("    purchaseCurrency: ").append(toIndentedString(purchaseCurrency)).append("\n");
    sb.append("    purchaseCountry: ").append(toIndentedString(purchaseCountry)).append("\n");
    sb.append("    billingCountries: ").append(toIndentedString(billingCountries)).append("\n");
    sb.append("    shippingCountries: ").append(toIndentedString(shippingCountries)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    merchantReference1: ").append(toIndentedString(merchantReference1)).append("\n");
    sb.append("    merchantReference2: ").append(toIndentedString(merchantReference2)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    merchantData: ").append(toIndentedString(merchantData)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    orderLines: ").append(toIndentedString(orderLines)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    shippingOptions: ").append(toIndentedString(shippingOptions)).append("\n");
    sb.append("    shippingAttributes: ").append(toIndentedString(shippingAttributes)).append("\n");
    sb.append("    styling: ").append(toIndentedString(styling)).append("\n");
    sb.append("    buttonKey: ").append(toIndentedString(buttonKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

