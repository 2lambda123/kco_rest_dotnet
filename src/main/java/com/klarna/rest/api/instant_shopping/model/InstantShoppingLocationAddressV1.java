/*
 * Klarna Instant Shopping
 * The Instant Shopping API is serving two purposes:  to manage the orders as they result from the Instant Shopping purchase flow  to generate Instant Shopping Button keys necessary for setting up the Instant Shopping flow both onsite and offsite    The 'authorizations' endpoint is relevant to authorize the orders. The 'buttons' endpoint is relevant to manage the button setup options.   Note that as soon as a purchase initiated through Instant Shopping is authorized with Klarna, the order should be read and handled using the Order Management API.    Button Setup Options is the library for creating and maintaining Instant Shopping Button Keys.  The API is accessible through a few different URLS. There are different URLs for testing and for making live purchases as well as different URLs for depending on if you are based in Europe or in the U.S.  All interaction with Klarna's APIs must be done over HTTPS. To authenticate with Klarna you use your API Credentials and HTTP Basic auth.  The credentials consist of two elements:  Username - Consists of your Merchant ID (eid) - a unique number that identifies your e-store, combined with a random string.  Password - a string which is associated with your Merchant ID and is used to authorize use of Klarna's APIs  Note: The API credentials are separate from your Merchant ID, and it is possible to have several API credentials associated with the same Merchant ID.  The credentials should be sent as an authorization header for every request with the username and password.  You receive both your live and test credentials by contacting Klarna sales for your country.  If the credentials are missing or wrong Klarna will respond with 401 Unauthorized. You can read more about HTTP Basic auth in the Wikipedia article. The username and password the username:password in base64. [https://gist.github.com/brandonmwest/a2632d0a65088a20c00a](Examples)   You can read more about Klarna Data types at https://developers.klarna.com/api/#data-types, e.g. the date format is ISO 8601
 *
 * OpenAPI spec version: 1.0.0
 * Contact: instant.shopping.e@klarna.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.klarna.rest.api.instant_shopping.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * InstantShoppingLocationAddressV1
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-01-20T10:47:29.611Z")
public class InstantShoppingLocationAddressV1 {
  @JsonProperty("street_address")
  private String streetAddress = null;

  @JsonProperty("street_address2")
  private String streetAddress2 = null;

  @JsonProperty("postal_code")
  private String postalCode = null;

  @JsonProperty("city")
  private String city = null;

  @JsonProperty("region")
  private String region = null;

  @JsonProperty("country")
  private String country = null;

  public InstantShoppingLocationAddressV1 streetAddress(String streetAddress) {
    this.streetAddress = streetAddress;
    return this;
  }

   /**
   * Street address, first line.
   * @return streetAddress
  **/
  @ApiModelProperty(example = "Lombard St 10", value = "Street address, first line.")
  public String getStreetAddress() {
    return streetAddress;
  }

  public void setStreetAddress(String streetAddress) {
    this.streetAddress = streetAddress;
  }

  public InstantShoppingLocationAddressV1 streetAddress2(String streetAddress2) {
    this.streetAddress2 = streetAddress2;
    return this;
  }

   /**
   * Street address, second line.
   * @return streetAddress2
  **/
  @ApiModelProperty(example = "Apt 214", value = "Street address, second line.")
  public String getStreetAddress2() {
    return streetAddress2;
  }

  public void setStreetAddress2(String streetAddress2) {
    this.streetAddress2 = streetAddress2;
  }

  public InstantShoppingLocationAddressV1 postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Postal/post code.
   * @return postalCode
  **/
  @ApiModelProperty(example = "90210", value = "Postal/post code.")
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }

  public InstantShoppingLocationAddressV1 city(String city) {
    this.city = city;
    return this;
  }

   /**
   * City.
   * @return city
  **/
  @ApiModelProperty(example = "Beverly Hills", value = "City.")
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public InstantShoppingLocationAddressV1 region(String region) {
    this.region = region;
    return this;
  }

   /**
   * State or Region.
   * @return region
  **/
  @ApiModelProperty(example = "CA", value = "State or Region.")
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }

  public InstantShoppingLocationAddressV1 country(String country) {
    this.country = country;
    return this;
  }

   /**
   * ISO 3166 alpha-2 format
   * @return country
  **/
  @ApiModelProperty(example = "US", value = "ISO 3166 alpha-2 format")
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstantShoppingLocationAddressV1 locationAddressV1 = (InstantShoppingLocationAddressV1) o;
    return Objects.equals(this.streetAddress, locationAddressV1.streetAddress) &&
        Objects.equals(this.streetAddress2, locationAddressV1.streetAddress2) &&
        Objects.equals(this.postalCode, locationAddressV1.postalCode) &&
        Objects.equals(this.city, locationAddressV1.city) &&
        Objects.equals(this.region, locationAddressV1.region) &&
        Objects.equals(this.country, locationAddressV1.country);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streetAddress, streetAddress2, postalCode, city, region, country);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstantShoppingLocationAddressV1 {\n");
    
    sb.append("    streetAddress: ").append(toIndentedString(streetAddress)).append("\n");
    sb.append("    streetAddress2: ").append(toIndentedString(streetAddress2)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

